/*
 * MainWnd.java
 *
 * Created on 28 de junio de 2008, 06:46 PM
 */

package telnetapp;

import java.awt.Color;
import java.awt.Dimension;
import java.net.Socket;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.ui.RectangleInsets;

/**
 *
 * @author  cjacuna
 */
public class MainWnd extends javax.swing.JFrame {

    private static Integer numSensores = 12;
    String ip;
    Integer port;
    DataReader reader = null;
    double[] kArr = new double[12];
    private TimeSeries[] series = new TimeSeries[numSensores]; 
    TimeSeriesCollection[] seriesCollection = new TimeSeriesCollection[numSensores]; 
    JFreeChart jfreechart;
    
    /** Creates new form MainWnd */
    public MainWnd() {
        initComponents();
        initMyComponents();
    }
    
    private void initMyComponents(){
        for( int i = 0 ; i < numSensores ; i++ ){
            series[i] = new TimeSeries("Sensor "+(i+1), Millisecond.class); 
            seriesCollection[i] = new TimeSeriesCollection(series[i]);
        }
        jfreechart = ChartFactory.createTimeSeriesChart("Sensores puente", "Time", "Value", null, true, true, false);
        jfreechart.setBackgroundPaint(Color.white);
        XYPlot xyplot = jfreechart.getXYPlot();
        xyplot.setBackgroundPaint(Color.lightGray);
        xyplot.setDomainGridlinePaint(Color.white);
        xyplot.setRangeGridlinePaint(Color.white);
        xyplot.setAxisOffset(new RectangleInsets(4D, 4D, 4D, 4D));
        ValueAxis valueaxis = xyplot.getDomainAxis();
        valueaxis.setAutoRange(true);
        valueaxis.setFixedAutoRange(60000D);
        for( int i = 0 ; i < numSensores ; i++ ){
            xyplot.setRenderer(i, new DefaultXYItemRenderer());
        }
        NumberAxis numberaxis = new NumberAxis("Datos");
        numberaxis.setAutoRangeIncludesZero(false);
        /*xyplot.setRangeAxis(1, numberaxis);
        xyplot.mapDatasetToRangeAxis(1, 1); */
        ChartPanel chartPanel = new ChartPanel(jfreechart);
        add(chartPanel);
        chartPanel.setPreferredSize(new Dimension(500, 270));
        pnlPpal.setRightComponent(chartPanel);
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPpal = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        lblIp = new javax.swing.JLabel();
        txtFldIp = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        txtFldPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        chkboxSensor1 = new javax.swing.JCheckBox();
        chkboxSensor2 = new javax.swing.JCheckBox();
        chkboxSensor3 = new javax.swing.JCheckBox();
        chkboxSensor4 = new javax.swing.JCheckBox();
        chkboxSensor5 = new javax.swing.JCheckBox();
        chkboxSensor6 = new javax.swing.JCheckBox();
        chkboxSensor7 = new javax.swing.JCheckBox();
        chkboxSensor8 = new javax.swing.JCheckBox();
        chkboxSensor9 = new javax.swing.JCheckBox();
        chkboxSensor10 = new javax.swing.JCheckBox();
        chkboxSensor11 = new javax.swing.JCheckBox();
        chkboxSensor12 = new javax.swing.JCheckBox();
        imgInvias = new javax.swing.JButton();
        txtFldK1 = new javax.swing.JTextField();
        txtFldK2 = new javax.swing.JTextField();
        txtFldK3 = new javax.swing.JTextField();
        txtFldK4 = new javax.swing.JTextField();
        txtFldK5 = new javax.swing.JTextField();
        txtFldK6 = new javax.swing.JTextField();
        txtFldK7 = new javax.swing.JTextField();
        txtFldK8 = new javax.swing.JTextField();
        txtFldK9 = new javax.swing.JTextField();
        txtFldK10 = new javax.swing.JTextField();
        txtFldK11 = new javax.swing.JTextField();
        txtFldK12 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INVIAS - Monitoreo de puentes");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/telnetapp/logo.invias.jpg")).getImage());
        setName("framePpal"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlPpal.setDividerLocation(160);

        lblIp.setFont(new java.awt.Font("Dialog", 1, 16));
        lblIp.setText("IP");

        txtFldIp.setText("10.2.7.11");

        lblPort.setFont(new java.awt.Font("Dialog", 1, 16));
        lblPort.setText("Puerto");

        txtFldPort.setText("23");

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        chkboxSensor1.setText("Sensor 1");
        chkboxSensor1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor2.setText("Sensor 2");
        chkboxSensor2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor3.setText("Sensor 3");
        chkboxSensor3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor4.setText("Sensor 4");
        chkboxSensor4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor5.setText("Sensor 5");
        chkboxSensor5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor6.setText("Sensor 6");
        chkboxSensor6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor7.setText("Sensor 7");
        chkboxSensor7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor8.setText("Sensor 8");
        chkboxSensor8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor9.setText("Sensor 9");
        chkboxSensor9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor10.setText("Sensor 10");
        chkboxSensor10.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor11.setText("Sensor 11");
        chkboxSensor11.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        chkboxSensor12.setText("Sensor 12");
        chkboxSensor12.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkbxSensorChanged(evt);
            }
        });

        imgInvias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/telnetapp/logo.invias.jpg"))); // NOI18N
        imgInvias.setBorderPainted(false);
        imgInvias.setContentAreaFilled(false);
        imgInvias.setFocusPainted(false);
        imgInvias.setRequestFocusEnabled(false);
        imgInvias.setRolloverEnabled(false);

        txtFldK1.setText("1.0");

        txtFldK2.setText("2.0");

        txtFldK3.setText("3.0");

        txtFldK4.setText("4.0");

        txtFldK5.setText("5.0");

        txtFldK6.setText("6.0");

        txtFldK7.setText("7.0");

        txtFldK8.setText("8.0");

        txtFldK9.setText("9.0");

        txtFldK10.setText("10.0");

        txtFldK11.setText("11.0");

        txtFldK12.setText("12.0");

        javax.swing.GroupLayout pnlLeftLayout = new javax.swing.GroupLayout(pnlLeft);
        pnlLeft.setLayout(pnlLeftLayout);
        pnlLeftLayout.setHorizontalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPort)
                            .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtFldPort, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlLeftLayout.createSequentialGroup()
                                    .addComponent(lblIp)
                                    .addGap(104, 104, 104))
                                .addComponent(txtFldIp, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(imgInvias, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor2)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK2, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor3)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK3, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor4)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK4, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor5)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK5, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor6)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK6, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor7)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK7, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addComponent(chkboxSensor8)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK8, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnStart)
                                        .addComponent(btnStop))
                                    .addComponent(chkboxSensor1))
                                .addGap(18, 18, 18)
                                .addComponent(txtFldK1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                            .addGroup(pnlLeftLayout.createSequentialGroup()
                                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkboxSensor9)
                                    .addComponent(chkboxSensor10))
                                .addGap(12, 12, 12)
                                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtFldK10, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                                    .addComponent(txtFldK9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)))))
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkboxSensor12)
                        .addGap(12, 12, 12)
                        .addComponent(txtFldK12, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkboxSensor11)
                        .addGap(12, 12, 12)
                        .addComponent(txtFldK11, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlLeftLayout.setVerticalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgInvias)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIp)
                .addGap(2, 2, 2)
                .addComponent(txtFldIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(lblPort)
                .addGap(1, 1, 1)
                .addComponent(txtFldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkboxSensor1)
                    .addComponent(txtFldK1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkboxSensor2)
                    .addComponent(txtFldK2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor3)
                    .addComponent(txtFldK3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor4)
                    .addComponent(txtFldK4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor5)
                    .addComponent(txtFldK5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor6)
                    .addComponent(txtFldK6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor7)
                    .addComponent(txtFldK7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor8)
                    .addComponent(txtFldK8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLeftLayout.createSequentialGroup()
                        .addComponent(chkboxSensor9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkboxSensor10)
                            .addComponent(txtFldK10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtFldK9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor11)
                    .addComponent(txtFldK11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkboxSensor12)
                    .addComponent(txtFldK12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(301, Short.MAX_VALUE))
        );

        pnlPpal.setLeftComponent(pnlLeft);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPpal, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPpal, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        boolean bParmsOk = true;
        try {
            ip = txtFldIp.getText();
            port = new Integer(txtFldPort.getText());
        } catch (Exception ex) {
            bParmsOk = false;
            JOptionPane.showMessageDialog(this,"La dirección IP y/o puerto no son válidos","Atención",JOptionPane.ERROR_MESSAGE);
        }
        try {
            kArr[0] = Double.valueOf(txtFldK1.getText()).doubleValue();
            kArr[1] = Double.valueOf(txtFldK2.getText()).doubleValue();
            kArr[2] = Double.valueOf(txtFldK3.getText()).doubleValue();
            kArr[3] = Double.valueOf(txtFldK4.getText()).doubleValue();
            kArr[4] = Double.valueOf(txtFldK5.getText()).doubleValue();
            kArr[5] = Double.valueOf(txtFldK6.getText()).doubleValue();
            kArr[6] = Double.valueOf(txtFldK7.getText()).doubleValue();
            kArr[7] = Double.valueOf(txtFldK8.getText()).doubleValue();
            kArr[8] = Double.valueOf(txtFldK9.getText()).doubleValue();
            kArr[9] = Double.valueOf(txtFldK10.getText()).doubleValue();
            kArr[10] = Double.valueOf(txtFldK11.getText()).doubleValue();
            kArr[11] = Double.valueOf(txtFldK12.getText()).doubleValue();
        } catch (Exception ex) {
            bParmsOk = false;
            JOptionPane.showMessageDialog(this,"Por favor revise que las constantes sean válidas","Atención",JOptionPane.ERROR_MESSAGE);
        }
        if(bParmsOk){
            try {
                    Socket socket = new Socket(ip,port);
                    reader = new DataReader(socket,series,kArr);
                    Thread threadReader = new Thread (reader);
                    threadReader.start();
                    btnStart.setEnabled(false);
                    btnStop.setEnabled(true);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this,"No fue posible conectarse con el dispositivo.","Atención",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        reader.setEndThread(true);
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
    }//GEN-LAST:event_btnStopActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if( reader != null && !reader.isEndThread() ){
            reader.setEndThread(true);
            //Esperar a que la tarea reciba el mensaje
            try {
                Thread.sleep(2000);
            } catch (Exception e) {
                System.err.println("Problemas esperando por el hilo : " + e.getMessage());
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void chkbxSensorChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkbxSensorChanged
        XYPlot xyplot = jfreechart.getXYPlot();
        if( evt.getSource().equals(chkboxSensor1)){
            if( chkboxSensor1.isSelected() ){
                xyplot.setDataset(0, seriesCollection[0]);
            }else{
                xyplot.setDataset(0, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor2)){
            if( chkboxSensor2.isSelected() ){
                xyplot.setDataset(1, seriesCollection[1]);
            }else{
                xyplot.setDataset(1, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor3)){
            if( chkboxSensor3.isSelected() ){
                xyplot.setDataset(2, seriesCollection[2]);
            }else{
                xyplot.setDataset(2, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor4)){
            if( chkboxSensor4.isSelected() ){
                xyplot.setDataset(3, seriesCollection[3]);
            }else{
                xyplot.setDataset(3, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor5)){
            if( chkboxSensor5.isSelected() ){
                xyplot.setDataset(4, seriesCollection[4]);
            }else{
                xyplot.setDataset(4, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor6)){
            if( chkboxSensor6.isSelected() ){
                xyplot.setDataset(5, seriesCollection[5]);
            }else{
                xyplot.setDataset(5, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor7)){
            if( chkboxSensor7.isSelected() ){
                xyplot.setDataset(6, seriesCollection[6]);
            }else{
                xyplot.setDataset(6, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor8)){
            if( chkboxSensor8.isSelected() ){
                xyplot.setDataset(7, seriesCollection[7]);
            }else{
                xyplot.setDataset(7, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor9)){
            if( chkboxSensor9.isSelected() ){
                xyplot.setDataset(8, seriesCollection[8]);
            }else{
                xyplot.setDataset(8, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor10)){
            if( chkboxSensor10.isSelected() ){
                xyplot.setDataset(9, seriesCollection[9]);
            }else{
                xyplot.setDataset(9, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor11)){
            if( chkboxSensor11.isSelected() ){
                xyplot.setDataset(10, seriesCollection[10]);
            }else{
                xyplot.setDataset(10, null);
            }
        }
        if( evt.getSource().equals(chkboxSensor12)){
            if( chkboxSensor12.isSelected() ){
                xyplot.setDataset(11, seriesCollection[11]);
            }else{
                xyplot.setDataset(11, null);
            }
        }        
    }//GEN-LAST:event_chkbxSensorChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWnd().setVisible(true);
                //new Simulador().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox chkboxSensor1;
    private javax.swing.JCheckBox chkboxSensor10;
    private javax.swing.JCheckBox chkboxSensor11;
    private javax.swing.JCheckBox chkboxSensor12;
    private javax.swing.JCheckBox chkboxSensor2;
    private javax.swing.JCheckBox chkboxSensor3;
    private javax.swing.JCheckBox chkboxSensor4;
    private javax.swing.JCheckBox chkboxSensor5;
    private javax.swing.JCheckBox chkboxSensor6;
    private javax.swing.JCheckBox chkboxSensor7;
    private javax.swing.JCheckBox chkboxSensor8;
    private javax.swing.JCheckBox chkboxSensor9;
    private javax.swing.JButton imgInvias;
    private javax.swing.JLabel lblIp;
    private javax.swing.JLabel lblPort;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JSplitPane pnlPpal;
    private javax.swing.JTextField txtFldIp;
    private javax.swing.JTextField txtFldK1;
    private javax.swing.JTextField txtFldK10;
    private javax.swing.JTextField txtFldK11;
    private javax.swing.JTextField txtFldK12;
    private javax.swing.JTextField txtFldK2;
    private javax.swing.JTextField txtFldK3;
    private javax.swing.JTextField txtFldK4;
    private javax.swing.JTextField txtFldK5;
    private javax.swing.JTextField txtFldK6;
    private javax.swing.JTextField txtFldK7;
    private javax.swing.JTextField txtFldK8;
    private javax.swing.JTextField txtFldK9;
    private javax.swing.JTextField txtFldPort;
    // End of variables declaration//GEN-END:variables

}
